"""
Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. 
The tree tree could also be considered as a subtree of itself.
"""



def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
                
        
        def isSame(root,subRoot):
            
            if not root and not subRoot:
                return True
            
            if root and subRoot:
                if root.val!=subRoot.val:
                    return False
                return isSame(root.left,subRoot.left) and isSame (root.right,subRoot.right)
            return False
            
               
        stack=[root]        
        
        while stack:
            
            node=stack.pop()
           
            if isSame(node,subRoot)==True:
                return True
            
            if node.left:
                stack.append(node.left)
                
            if node.right:
                stack.append(node.right)
                
        return False
        
        
